#!/usr/bin/env bash
# shellcheck disable=SC1090


set -e

export PATH+=':/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

######## VARIABLES #########
# For better maintainability, we store as much information that can change in variables
# This allows us to make a change in one place that can propagate to all instances of the variable
# These variables should all be GLOBAL variables, written in CAPS
# Local variables will be in lowercase and will exist only within functions
# It's still a work in progress, so you may see some variance in this guideline until it is complete

# List of supported DNS servers
DNS_SERVERS=$(cat << EOM
Google (ECS, DNSSEC);8.8.8.8;8.8.4.4;2001:4860:4860:0:0:0:0:8888;2001:4860:4860:0:0:0:0:8844
OpenDNS (ECS, DNSSEC);208.67.222.222;208.67.220.220;2620:119:35::35;2620:119:53::53
Level3;4.2.2.1;4.2.2.2;;
Comodo;8.26.56.26;8.20.247.20;;
DNS.WATCH (DNSSEC);84.200.69.80;84.200.70.40;2001:1608:10:25:0:0:1c04:b12f;2001:1608:10:25:0:0:9249:d69b
Quad9 (filtered, DNSSEC);9.9.9.9;149.112.112.112;2620:fe::fe;2620:fe::9
Quad9 (unfiltered, no DNSSEC);9.9.9.10;149.112.112.10;2620:fe::10;2620:fe::fe:10
Quad9 (filtered, ECS, DNSSEC);9.9.9.11;149.112.112.11;2620:fe::11;2620:fe::fe:11
Cloudflare (DNSSEC);1.1.1.1;1.0.0.1;2606:4700:4700::1111;2606:4700:4700::1001
EOM
)


echo "Select the hostname for this device"
options=("1. MacBookPro" "2. HackBookPro" "3. rPi3" "4. rPi4" "5. rPi1" "6. NickTop" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "1. MacBookPro" )
        sudo hostnamectl set-hostname MacBookPro
        echo "setting hostname to MacBookPro"
        ;;
        "2. HackBookPro" )
            sudo hostnamectl set-hostname HackBookPro
            echo "setting hostname to HackBookPro"
            ;;
        "3. rPi3" )
            sudo hostnamectl set-hostname rPi3
            echo "setting hostname to rPi3"
            ;;
        "4. rPi4" )
            sudo hostnamectl set-hostname rPi4
            echo "setting hostname to rPi4"
            ;;
        "5. rPi1" )
            sudo hostnamectl set-hostname rPi1
            echo "setting hostname to rPi1"
            ;;
        "6. NickTop" )
            sudo hostnamectl set-hostname NickTop
            echo "setting hostname to NickTop"
            ;;
        "Quit")
            break
            ;;
        *) echo "invalid option $REPLY";;
    esac
done



# If the color table file exists,
if [[ -f "${coltable}" ]]; then
    # source it
    source "${coltable}"
# Otherwise,
else
    # Set these values so the installer can still run in color
    # Regular           Bold                Underline           High Intensity      BoldHigh Intens     Background          High Intensity Backgrounds
Bla='\e[0;30m';     BBla='\e[1;30m';    UBla='\e[4;30m';    IBla='\e[0;90m';    BIBla='\e[1;90m';   On_Bla='\e[40m';    On_IBla='\e[0;100m';
Red='\e[0;31m';     BRed='\e[1;31m';    URed='\e[4;31m';    IRed='\e[0;91m';    BIRed='\e[1;91m';   On_Red='\e[41m';    On_IRed='\e[0;101m';
Gre='\e[0;32m';     BGre='\e[1;32m';    UGre='\e[4;32m';    IGre='\e[0;92m';    BIGre='\e[1;92m';   On_Gre='\e[42m';    On_IGre='\e[0;102m';
Yel='\e[0;33m';     BYel='\e[1;33m';    UYel='\e[4;33m';    IYel='\e[0;93m';    BIYel='\e[1;93m';   On_Yel='\e[43m';    On_IYel='\e[0;103m';
Blu='\e[0;34m';     BBlu='\e[1;34m';    UBlu='\e[4;34m';    IBlu='\e[0;94m';    BIBlu='\e[1;94m';   On_Blu='\e[44m';    On_IBlu='\e[0;104m';
Pur='\e[0;35m';     BPur='\e[1;35m';    UPur='\e[4;35m';    IPur='\e[0;95m';    BIPur='\e[1;95m';   On_Pur='\e[45m';    On_IPur='\e[0;105m';
Cya='\e[0;36m';     BCya='\e[1;36m';    UCya='\e[4;36m';    ICya='\e[0;96m';    BICya='\e[1;96m';   On_Cya='\e[46m';    On_ICya='\e[0;106m';
Whi='\e[0;37m';     BWhi='\e[1;37m';    UWhi='\e[4;37m';    IWhi='\e[0;97m';    BIWhi='\e[1;97m';   On_Whi='\e[47m';    On_IWhi='\e[0;107m';

    COL_NC='\e[0m' # No Color
    COL_LIGHT_GREEN='\e[1;32m'
    COL_LIGHT_RED='\e[1;31m'
    TICK="[${COL_LIGHT_GREEN}✓${COL_NC}]"
    CROSS="[${COL_LIGHT_RED}✗${COL_NC}]"
    INFO="[i]"
    # shellcheck disable=SC2034
    DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
    OVER="\\r\\033[K"
fi

show_ascii_jrb() {
#    echo -e "\e[3$(( $RANDOM * 6 / 32767 + 1 ))
    echo -e "
    ${On_IPur}   
 
                                ██ ███████   ██████
                               ░██░██░░░░██ ░█░░░░██
                               ░██░██   ░██ ░█   ░██
                               ░██░███████  ░██████              
                               ░██░██░░░██  ░█░░░░ ██
                           ██  ░██░██  ░░██ ░█    ░██
                          ░░█████ ░██   ░░██░███████
                           ░░░░░  ░░     ░░ ░░░░░░░
    ${On_IPur}  ████████                ██           ██
               ██░░░░░░                ░░  ██████   ░██
              ░██         █████  ██████ ██░██░░░██ ██████  ██████
              ░█████████ ██░░░██░░██░░█░██░██  ░██░░░██░  ██░░░░
              ░░░░░░░░██░██  ░░  ░██ ░ ░██░██████   ░██  ░░█████
                     ░██░██   ██ ░██   ░██░██░░░    ░██   ░░░░░██
               ████████ ░░█████ ░███   ░██░██       ░░██  ██████
              ░░░░░░░░   ░░░░░  ░░░    ░░ ░░         ░░  ░░░░░░ ${COL_NC}

"
}


packagesNeeded='barrier'
if [ -x "$(command -v apk)" ];       then sudo apk add --no-cache $packagesNeeded
elif [ -x "$(command -v apt-get)" ]; then sudo apt-get install $packagesNeeded
elif [ -x "$(command -v dnf)" ];     then sudo dnf install $packagesNeeded
elif [ -x "$(command -v zypper)" ];  then sudo zypper install $packagesNeeded
else echo "FAILED TO INSTALL PACKAGE: Package manager not found. You must manually install: $packagesNeeded">&2; fi

CLIENTNAME=$(hostname)
barrierc --no-tray \
         --debug INFO \
         --name $CLIENTNAME \
         [192.168.1.10]:24800
